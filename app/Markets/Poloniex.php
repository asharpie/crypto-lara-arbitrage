<?php
/**
 * Created by PhpStorm.
 * User: Dell
 * Date: 11/17/2017
 * Time: 5:36 PM
 */

namespace App\Markets;

use App\Coin;
use App\Market;

class Poloniex extends Market
{
    protected $name = 'Poloniex';
    protected $base_url = 'https://poloniex.com/';

    function getOrderbook($coin)
    {
        $orderbook = $this->request('public', [
            'command' => 'returnOrderBook',
            'currencyPair' => "BTC_" . $coin,
            'depth' => 3
        ]);

        //!TODO: to match the rate
        if (empty($orderbook->asks)) {
            return false;
        }

        if (empty($orderbook->bids)) {
            return false;
        }

        $buy = $orderbook->bids[0];
        $sell = $orderbook->asks[0];
        $quantity = [
            'bid' => sprintf("%.10f", $buy[1]),
            'ask' => sprintf("%.10f", $sell[1]),
            'bid_rate' => $buy[0],
            'ask_rate' => $sell[0],
        ];
//        dd($quantity);
        return $quantity;

    }

    /**
     * @return bool
     */
    function getData()
    {
        $coins = $this->request('public', ['command' => 'returnTicker']);
        if (!$coins)
            return false;

        if (is_object($coins))
            foreach ($coins as $symbol => $coin) {

                if (strpos($symbol, 'BTC_') === false) {
                    continue;
                }
                $symbol = str_replace('BTC_', '', $symbol);

                Coin::create([
                    'market' => $this->name,
                    'name' => $symbol,
                    'ask' => $coin->lowestAsk,
                    'bid' => $coin->highestBid,
                    'last' => $coin->last
                ]);


            }
        return true;
    }

    public function getCurrencies()
    {
        if (!is_null($this->coins)) {
            return $this->coins;
        }
        $currencies = $this->request('public', ['command' => 'returnCurrencies']);

        if (!$currencies)
            return false;

        foreach ($currencies as $symbol => $currency) {

            if ($currency->disabled == 1 || $currency->delisted == 1)
                continue;

            $coins[$symbol] = $currency->txFee;
        }

        $this->coins = $coins;
        return array_keys($this->coins);
    }

    public function getLastPrice($coin)
    {


        return parent::getLastPrice($coin); // TODO: Change the autogenerated stub
    }


}